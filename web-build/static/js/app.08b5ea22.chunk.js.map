{"version":3,"sources":["pages/ProjectSrc/Crypto/cover2.jpg","pages/ProjectSrc/ZoomSniper/cover.png","pages/ProjectSrc/ZoomSniper/webarchitecture.jpg","pages/ProjectSrc/Rendering/LFA_small.png","pages/ProjectSrc/ImageEncoder/3.png","assets/2_4.jpg","pages/ProjectSrc/Crypto/priceChart.png","pages/ProjectSrc/Crypto/1.jpg","pages/ProjectSrc/Crypto/frame1.jpg","pages/ProjectSrc/Crypto/frame2.jpg","pages/ProjectSrc/Crypto/riser.jpg","pages/ProjectSrc/Crypto/gpuBox1.jpg","pages/ProjectSrc/Crypto/gpuBox2.jpg","pages/ProjectSrc/Crypto/2.jpg","pages/ProjectSrc/Crypto/3.jpg","pages/ProjectSrc/Crypto/4.jpg","pages/ProjectSrc/Crypto/5.png","pages/ProjectSrc/Rendering/1.jpg","pages/ProjectSrc/Rendering/robot2.jpg","pages/ProjectSrc/Rendering/slide2.png","pages/ProjectSrc/Rendering/slides.png","pages/ProjectSrc/Rendering/line_1.png","pages/ProjectSrc/Rendering/Wed1.jpg","pages/ProjectSrc/Rendering/Key1.png","pages/ProjectSrc/Rendering/Key2.png","pages/ProjectSrc/ImageEncoder/1.png","styles/navStyle.js","components/navigationbar.js","components/projectTile.js","pages/ProjectSrc/projectIndex.js","pages/Projects.js","components/textPage.js","pages/mainData.js","pages/mainPage.js","pages/ExperienceSrc/experienceData.js","pages/experience.js","pages/ContactSrc/contactData.js","pages/contact.js","pages/ProjectSrc/Crypto/cryptoData.js","pages/ProjectSrc/Crypto/crypto.js","pages/ProjectSrc/ZoomSniper/zoomData.js","pages/ProjectSrc/ZoomSniper/zoom.js","pages/ProjectSrc/Rendering/renderingData.js","pages/ProjectSrc/Rendering/rendering.js","pages/ProjectSrc/ImageEncoder/imageData.js","pages/ProjectSrc/ImageEncoder/image.js","home.js","App.js","pages/ProjectSrc/placeholder.png"],"names":["module","exports","navStyle","StyleSheet","create","navBarParent","alignItems","flexDirection","flexWrap","justifyContent","navBar","flex","navBarText","fontSize","color","fontWeight","alignSelf","textTransform","NavigationBar","View","style","NavStyle","styles","viewLeft","Text","nameText","viewRightText","TouchableOpacity","this","props","currentPage","appButtonContainerSelected","appButtonContainer","onPress","navigateTo","viewRight","React","Component","elevation","backgroundColor","borderRadius","paddingVertical","paddingHorizontal","opacity","textContainer","ProjectTile","state","wHeight","Dimensions","get","height","wWidth","width","addEventListener","handler","setState","window","imgDimension","scaledWidth","scaledHeight","scaleFactor","console","log","container","LinearGradient","colors","background","end","tile","path","Image","source","image","imageLogo","scaleImage","tileText","title","marginLeft","marginRight","marginTop","marginBottom","ProjectIndex","Img1","Img2","Img3","Img4","Placeholder","Platform","OS","Projects","x","navigation","routeName","navigate","size","pageContainerTop","boldText","pageContainer","map","project","index","tileParent","padding","smallText","adjustFontSizeToFit","textAlign","viewLeftContainer","viewRightContainer","TestPage","pageData","showsVerticalScrollIndicator","data","type","Fragment","sectionText","text","captionBox","captionText","caption","alignRow","imageTextParentColumn","image2","caption2","image3","caption3","imageTextParent","minWidth","invisText","titleSize","textSize","Linking","openURL","url","preText","linkText","textDecorationLine","MainData","Cover","MainPage","onScreenLoad","fetch","method","headers","Accept","body","JSON","stringify","appID","ip","ExperienceData","normalText","CryptoData","PriceChart","Garage1","Frame1","Frame2","Riser","GpuBox1","GpuBox2","Garage2","Garage3","Garage4","Garage5","Crypto","ZoomData","Web","Zoom","RenderingData","Robot1","Robot2","Robot3","Robot4","India1","India2","Key1","Key2","Rendering","ImageData","isWeb","Home","createSwitchNavigator","Experience","Contact","navigationOptions","headerTintColor","headerStyle","scrollEnabled","createBrowserApp","createAppContainer","App","outer"],"mappings":"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","file":"static/js/app.08b5ea22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cover2.40cfab20.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cover.4a0a755d.png\";","module.exports = __webpack_public_path__ + \"static/media/webarchitecture.753f0f49.jpg\";","module.exports = __webpack_public_path__ + \"static/media/LFA_small.8a6f7e98.png\";","module.exports = __webpack_public_path__ + \"static/media/3.f7ca8490.png\";","module.exports = __webpack_public_path__ + \"static/media/2_4.f8cc7da1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/priceChart.23a3eaeb.png\";","module.exports = __webpack_public_path__ + \"static/media/1.25025e1e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/frame1.699a76c2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/frame2.13fa0534.jpg\";","module.exports = __webpack_public_path__ + \"static/media/riser.aa4c83be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gpuBox1.6bf32736.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gpuBox2.8e8fbc35.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.5c28148e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.ea390b1e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.042d455c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.90eb15fb.png\";","module.exports = __webpack_public_path__ + \"static/media/1.0e22c73d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/robot2.c6c49f02.jpg\";","module.exports = __webpack_public_path__ + \"static/media/slide2.5b9039cc.png\";","module.exports = __webpack_public_path__ + \"static/media/slides.27dc6473.png\";","module.exports = __webpack_public_path__ + \"static/media/line_1.b829e098.png\";","module.exports = __webpack_public_path__ + \"static/media/Wed1.13f5f67a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Key1.8bf11790.png\";","module.exports = __webpack_public_path__ + \"static/media/Key2.e16bd4fa.png\";","module.exports = __webpack_public_path__ + \"static/media/1.b6c81be5.png\";","import {StyleSheet} from 'react-native';\r\n\r\nconst navStyle = StyleSheet.create({\r\n    navBarParent: {\r\n      //flex: .15, //Amount of bar showing\r\n      //maxHeight: 100, //Max height of bar\r\n      //minHeight: 70,\r\n      alignItems: 'center',\r\n      //padding: '100',\r\n      flexDirection: 'row', \r\n      flexWrap: \"wrap\",\r\n      justifyContent: 'space-between'   \r\n      \r\n  \r\n    },\r\n    navBar: {\r\n      flex: '1',\r\n      alignItems: 'center',\r\n      flexWrap: \"wrap\",\r\n      flexDirection: 'row'\r\n       \r\n    },\r\n    navBarText: {\r\n      fontSize: 18,\r\n      color: \"#000\",\r\n      fontWeight: \"bold\",\r\n      alignSelf: \"center\",\r\n      textTransform: \"uppercase\"   \r\n    }\r\n  });\r\n\r\nexport default navStyle;","// nav bar\r\n\r\nimport React from 'react';\r\nimport {View, Text, StyleSheet, Button, Platform, Pressable, TouchableOpacity } from 'react-native';\r\nimport { styleProps } from 'react-native-web/dist/cjs/modules/forwardedProps';\r\nimport NavStyle from \"../styles/navStyle\";\r\n\r\n\r\n\r\nexport default class NavigationBar extends React.Component {\r\n\r\n    render() {\r\n                \r\n        return <View style={NavStyle.navBar}>\r\n            {\r\n                <>\r\n                <View style={styles.viewLeft}></View>\r\n                \r\n\r\n                <Text\r\n                    style={styles.nameText}\r\n                \r\n                >Dominik Kapuscinski</Text>\r\n\r\n                \r\n                <View style={styles.viewRightText}></View>\r\n                \r\n                \r\n                <TouchableOpacity \r\n                    style={[this.props.currentPage == \"MainPage\" ? styles.appButtonContainerSelected : styles.appButtonContainer]}\r\n                    onPress={() => this.props.navigateTo('MainPage')}\r\n                    >\r\n                    <Text style={NavStyle.navBarText}>  Home  </Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity \r\n                    style={[this.props.currentPage == \"Projects\" ? styles.appButtonContainerSelected : styles.appButtonContainer]}\r\n                    onPress={() => this.props.navigateTo('Projects')}>\r\n                    <Text style={NavStyle.navBarText}>Projects</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity \r\n                    style={[this.props.currentPage == \"Experience\" ? styles.appButtonContainerSelected : styles.appButtonContainer]}\r\n                    onPress={() => this.props.navigateTo('Experience')}\r\n                    >\r\n                    <Text style={NavStyle.navBarText}>Experience</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity \r\n                    style={[this.props.currentPage == \"Contact\" ? styles.appButtonContainerSelected : styles.appButtonContainer]}\r\n                    onPress={() => this.props.navigateTo('Contact')}\r\n                    >\r\n                    <Text style={NavStyle.navBarText}>Contact</Text>\r\n                </TouchableOpacity>\r\n                <View style={styles.viewRight}></View>\r\n                </>\r\n\r\n            }\r\n           \r\n\r\n        </View>\r\n    }\r\n}\r\nconst styles = StyleSheet.create({\r\n    appButtonContainerSelected: {\r\n        elevation: 8,\r\n        backgroundColor: \"#256EFF\", //5700FF 256EFF\r\n        borderRadius: 0,\r\n        paddingVertical: 50,\r\n        paddingHorizontal: 12\r\n      },\r\n      appButtonContainer: {\r\n        elevation: 8,\r\n        backgroundColor: 'transparent',\r\n        borderRadius: 0,\r\n        paddingVertical: 50,\r\n        paddingHorizontal: 12,\r\n        opacity: 1.0\r\n      },\r\n      textContainer: {\r\n        flex: 1,\r\n      },\r\n      nameText: {\r\n        //flex: 1,\r\n        fontSize: 30,\r\n        color: \"#000\",\r\n        fontWeight: \"bold\",\r\n        //minWidth: 200,\r\n        //alignSelf: \"center\",\r\n        textTransform: \"uppercase\"  \r\n      },\r\n      viewRight: {\r\n        flex: .2\r\n      },\r\n      viewRightText: {\r\n        flex: 1\r\n      },\r\n      viewLeft: {\r\n        flex: .1\r\n      }\r\n})","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform, Pressable, TouchableOpacity, Dimensions } from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nexport default class ProjectTile extends React.Component {\r\n    \r\n    state = {  \r\n        //Initial width and height states\r\n        wHeight: Dimensions.get('window').height,\r\n        wWidth: Dimensions.get('window').width\r\n    }  \r\n\r\n    //Function to keep track of window width/height\r\n    componentDidMount() {\r\n        Dimensions.addEventListener(\"change\", (handler) => \r\n        {this.setState({wHeight: handler.window.height}); \r\n        this.setState({wWidth: handler.window.width});})   \r\n    };\r\n\r\n    \r\n\r\n    scaleImage(width, height) {\r\n        var imgDimension = {\r\n            scaledWidth: width,\r\n            scaledHeight: height,\r\n        }\r\n        var scaleFactor = width/height;\r\n\r\n        //If large screen size, scale up images\r\n        if (this.state.wWidth > 1600){\r\n            imgDimension.scaledWidth = (width * this.state.wWidth)/1600;\r\n            imgDimension.scaledHeight = imgDimension.scaledWidth/scaleFactor;;\r\n        }\r\n\r\n        \r\n        if (width > this.state.wWidth){\r\n            imgDimension.scaledWidth = this.state.wWidth;\r\n            imgDimension.scaledHeight = this.state.wWidth/scaleFactor;\r\n            console.log(imgDimension.scaledWidth);\r\n        }\r\n        \r\n        return imgDimension;\r\n    }\r\n\r\n    \r\n    render() {\r\n        return <View style={styles.container}>\r\n            \r\n            <LinearGradient\r\n                colors={['#ffffff', '#ffffff']}\r\n                style={styles.background}\r\n                end = {[1, 0]}>  \r\n                <TouchableOpacity \r\n                    style={styles.tile}\r\n                    onPress={() => this.props.navigateTo(this.props.path)}\r\n                    >\r\n                    <Image source={this.props.image} \r\n                    style={[styles.imageLogo, {width: this.scaleImage(600, 500).scaledWidth}, {height: this.scaleImage(600, 500).scaledHeight}]}>\r\n                    </Image>\r\n                    <Text style={styles.tileText}>{this.props.title}</Text>\r\n                  \r\n            </TouchableOpacity>             \r\n\r\n            </LinearGradient>\r\n            \r\n            \r\n        </View>\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    //Full container\r\n    container: {\r\n        marginLeft: '5%',\r\n        marginRight: '5%',\r\n        marginTop: '5%',\r\n        //flexBasis: '33%'\r\n        //flex: 1,\r\n        \r\n        //backgroundColor: 'white',\r\n    },\r\n    tile: {\r\n        elevation: 8,\r\n        backgroundColor: \"transparent\", //5700FF 256EFF\r\n        borderRadius: 30,\r\n        //paddingVertical: 50,\r\n        //paddingHorizontal: 12\r\n    },\r\n    tileText: {\r\n        fontSize: 30,\r\n        color: \"#000\",\r\n        fontWeight: \"bold\",\r\n        alignSelf: \"center\",\r\n        marginTop: '5%',\r\n        marginBottom: '5%'\r\n        //textTransform: \"uppercase\"   \r\n    },\r\n    imageLogo: {\r\n        //width: 600,\r\n        //height: 500,\r\n        alignSelf: \"center\",\r\n        borderRadius: 30,\r\n    },\r\n    //Gradient Background\r\n    background: {\r\n        flex: 1,\r\n        borderRadius: 30,\r\n    },\r\n\r\n\r\n      \r\n})","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\n\r\nimport Img1 from '../ProjectSrc/Crypto/cover2.jpg';\r\nimport Img2 from '../ProjectSrc/ZoomSniper/cover.png';\r\nimport Img3 from '../ProjectSrc/Rendering/LFA_small.png';\r\nimport Img4 from '../ProjectSrc/ImageEncoder/3.png';\r\n\r\nimport Placeholder from '../ProjectSrc/placeholder.png';\r\n\r\n\r\n\r\nexport const ProjectIndex = [\r\n    {\r\n        title: \"Cryptomining\",\r\n        image: Img1,\r\n        path: 'Crypto',\r\n    },\r\n    {\r\n        title: \"Zoom Sniper\",\r\n        image: Img2,\r\n        path: \"Zoom\",\r\n    },\r\n    {\r\n        title: \"3D Modelling and Rendering\",\r\n        image: Img3,\r\n        path: \"Rendering\",\r\n    },\r\n    {\r\n        title: \"Image Steganography\",\r\n        image: Img4,\r\n        path: \"Image\",\r\n    },\r\n    {\r\n        title: \"Networks\",\r\n        image: Placeholder,\r\n        path: \"projects/path2\",\r\n    },\r\n    {\r\n        title: \"PC Building\",\r\n        image: Placeholder,\r\n        path: \"projects/path2\",\r\n    },\r\n    {\r\n        title: \"FTC Robotics\",\r\n        image: Placeholder,\r\n        path: \"projects/path2\",\r\n    },\r\n    {\r\n        title: \"Web Scraping\",\r\n        image: Placeholder,\r\n        path: \"projects/path2\",\r\n    },\r\n    {\r\n        title: \"FTC Robotics\",\r\n        image: Placeholder,\r\n        path: \"projects/path2\",\r\n    },\r\n    {\r\n        title: \"Coinbase Exchange Java Connector\",\r\n        image: Placeholder,\r\n        path: \"projects/path2\",\r\n    },\r\n\r\n\r\n];","//Project screen\r\n\r\nimport React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\nimport NavigationBar from \"../components/navigationbar.js\";\r\nimport ProjectTile from \"../components/projectTile.js\";\r\nimport NavStyle from \"../styles/navStyle\";\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Dimensions } from 'react-native';\r\n\r\nimport { ProjectIndex } from '../pages/ProjectSrc/projectIndex.js';\r\n\r\nconst isWeb = Platform.OS === 'web';\r\n\r\nexport default class Projects extends React.Component {\r\n\r\n    static path = \"projects\";\r\n\r\n    state = {  \r\n        //Initial width and height states\r\n        wHeight: Dimensions.get('window').height,\r\n        wWidth: Dimensions.get('window').width\r\n    } \r\n\r\n\r\n    //Universal Navigation Function\r\n    navigateTo = (x) => {\r\n        //Check if is already on that page\r\n        if(x != this.props.navigation.state.routeName){\r\n            this.props.navigation.navigate(x);\r\n        }\r\n      };\r\n\r\n\r\n    //Function to keep track of window width/height\r\n    componentDidMount() {\r\n        Dimensions.addEventListener(\"change\", (handler) => \r\n        {this.setState({wHeight: handler.window.height}); \r\n        this.setState({wWidth: handler.window.width});})   \r\n    };\r\n\r\n    //Function to scale text/images based on window size\r\n    scaleSize (size) {\r\n        return (this.state.wWidth)/2543 * size;\r\n    }\r\n \r\n\r\n    render() {\r\n        return <View style={styles.container}>\r\n            \r\n            <View style={NavStyle.navBarParent}>\r\n                <NavigationBar navigateTo={this.navigateTo} currentPage='Projects'/>\r\n            </View>\r\n\r\n            <LinearGradient\r\n                colors={['#2b6ef2', '#103276']}\r\n                style={styles.background}\r\n                end = {[1, 1]}>               \r\n                \r\n                <View style={styles.pageContainerTop}></View>\r\n                <Text style={styles.boldText}>Projects</Text>\r\n                <View style={styles.pageContainer}>\r\n                    \r\n                    {ProjectIndex.map((project, index) => {\r\n                        return(\r\n                            <ProjectTile style={styles.tileParent} title={project.title} path={project.path} image={project.image} navigateTo={this.navigateTo}></ProjectTile> \r\n                        )\r\n\r\n\r\n                    })}\r\n\r\n                    \r\n                </View>\r\n\r\n                \r\n                \r\n\r\n            </LinearGradient>\r\n\r\n        </View>\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    //Full container\r\n    container: {\r\n        flex: 1,\r\n        //backgroundColor: 'white',\r\n    },\r\n    tileParent: {\r\n        flex: 1,\r\n        padding: 0,\r\n        \r\n    },\r\n    //Container below nav bar\r\n    pageContainer: {\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        flexWrap: \"wrap\",\r\n        //alignItems: 'flex-start',\r\n    },\r\n    //Top page space\r\n    pageContainerTop: {\r\n        flex: .01,\r\n        //flexDirection: 'row',\r\n    },\r\n    imageLogo: {\r\n        width: 10,\r\n        height: 10,\r\n        borderRadius: 30\r\n    },\r\n    boldText: {\r\n        //flex: 1,\r\n        fontSize: 50,\r\n        color: \"#ffffff\",\r\n        fontWeight: \"bold\",\r\n        alignSelf: 'center'\r\n    },\r\n    smallText: {\r\n        //flex: 1,\r\n        //fontSize: 30,\r\n        //numberOfLines: 5,\r\n        adjustFontSizeToFit: true,\r\n        color: \"#ffffff\",\r\n        fontWeight: \"standard\",\r\n        textAlign: 'justify'\r\n    },\r\n    viewLeftContainer: {\r\n        flex: 1,\r\n        marginLeft: '10%',\r\n        marginRight: '10%'\r\n    },\r\n    viewRightContainer: {\r\n        flex: .6,\r\n        //marginLeft: '10%',\r\n    },\r\n    //Gradient Background\r\n    background: {\r\n        flex: 1,\r\n    },\r\n\r\n      \r\n})","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Linking, FlatList, Button, Platform} from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Dimensions } from 'react-native';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\n\r\n\r\nexport default class TestPage extends React.Component {\r\n\r\n\r\n\r\n    state = {  \r\n        //Initial width and height states\r\n        wHeight: Dimensions.get('window').height,\r\n        wWidth: Dimensions.get('window').width\r\n    }  \r\n\r\n    //Function to keep track of window width/height\r\n    componentDidMount() {\r\n        Dimensions.addEventListener(\"change\", (handler) => \r\n        {this.setState({wHeight: handler.window.height}); \r\n        this.setState({wWidth: handler.window.width});})   \r\n    };\r\n\r\n    textAlign(width, height) {\r\n        var imgDimension = {\r\n            scaledWidth: width,\r\n            scaledHeight: height,\r\n        }\r\n\r\n        //If screen is small, dont justify text\r\n        if (this.state.wWidth > 1200){\r\n            return 'justify';\r\n        }\r\n        return 'left';\r\n    }\r\n\r\n    scaleImage(width, height) {\r\n        var imgDimension = {\r\n            scaledWidth: width,\r\n            scaledHeight: height,\r\n        }\r\n        var scaleFactor = width/height;\r\n\r\n        //If large screen size, scale up images\r\n        if (this.state.wWidth > 1600){\r\n            imgDimension.scaledWidth = (width * this.state.wWidth)/1600;\r\n            imgDimension.scaledHeight = imgDimension.scaledWidth/scaleFactor;;\r\n        }\r\n\r\n        \r\n        if (width > this.state.wWidth){\r\n            imgDimension.scaledWidth = this.state.wWidth;\r\n            imgDimension.scaledHeight = this.state.wWidth/scaleFactor;\r\n            console.log(imgDimension.scaledWidth);\r\n        }\r\n        \r\n        return imgDimension;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return <LinearGradient\r\n            \r\n                    colors={['#2b6ef2', '#103276']}\r\n                    style={styles.background}\r\n                    //style={[styles.background, {width: this.state.wWidth, height: this.state.wHeight}]}\r\n                    end = {[1, 0]}  \r\n                >\r\n                    <View style={styles.pageContainerTop}></View>\r\n                    <Text style={styles.boldText}>{this.props.pageData[0].title}</Text>\r\n                    <View style={styles.pageContainerTop}></View>\r\n                    \r\n                    \r\n                    <ScrollView showsVerticalScrollIndicator ={false}>\r\n                    \r\n                    \r\n                    \r\n                    <View style={styles.pageContainer}>\r\n                    \r\n\r\n                        {this.props.pageData.map((data, index) => {\r\n                            if(index > 0){\r\n                                //Standard text block\r\n                                if(data.type == \"block\"){\r\n                                    return (\r\n                                        <React.Fragment key={index}>\r\n                                            <Text style={[styles.sectionText, {textAlign: this.textAlign(data.width, data.height)}]}>{data.title}</Text>\r\n                                            <Text style={[styles.smallText, {textAlign: this.textAlign(data.width, data.height)}]}>{data.text}</Text>\r\n                                        </React.Fragment>\r\n                                    )\r\n                                }\r\n                                //Single image\r\n                                else if(data.type == \"image\"){\r\n                                    return(\r\n                                        <React.Fragment key={index}>\r\n                                            <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                <Image source={data.image} style={styles.imageLogo}></Image>\r\n                                                <Text style={styles.captionText}>{data.caption}</Text>\r\n                                            </View>\r\n                                            <Text style={styles.smallText}>{'\\n'}</Text>\r\n\r\n                                        </React.Fragment> \r\n                                    )                               \r\n                                    \r\n                                }\r\n                                //Double image\r\n                                else if(data.type == \"doubleImage\"){\r\n                                    return(\r\n                                        <React.Fragment key={index}>\r\n                                            <Text style={styles.smallText}>{'\\n'}</Text>\r\n                                            <View style={[data.width*2 < this.state.wWidth ? styles.alignRow : styles.imageTextParentColumn]}>\r\n                                            <View>\r\n                                                <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                    <Image source={data.image} style={styles.imageLogo}></Image>\r\n                                                    <Text style={styles.captionText}>{data.caption}</Text>\r\n                                                </View>\r\n                                                <Text style={styles.smallText}>{'\\n'}</Text>\r\n                                            </View>\r\n                                            <View>\r\n                                                <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                    <Image source={data.image2} style={styles.imageLogo}></Image>\r\n                                                    <Text style={styles.captionText}>{data.caption2}</Text>\r\n                                                </View>\r\n                                                <Text style={styles.smallText}>{'\\n'}</Text>\r\n                                            </View>\r\n                                            </View>\r\n                                        </React.Fragment> \r\n                                        ) \r\n                                }\r\n                                //Triple image\r\n                                else if(data.type == \"tripleImage\"){\r\n                                    return(\r\n                                        <React.Fragment key={index}>\r\n                                            <Text style={styles.smallText}>{'\\n'}</Text>\r\n                                            <View style={[data.width*3 < this.state.wWidth ? styles.alignRow : styles.imageTextParentColumn]}>\r\n                                            <View>\r\n                                                <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                    <Image source={data.image} style={styles.imageLogo}></Image>\r\n                                                    <Text style={styles.captionText}>{data.caption}</Text>\r\n                                                </View>\r\n                                                <Text style={styles.smallText}>{'\\n'}</Text>\r\n                                            </View>\r\n                                            <View>\r\n                                                <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                    <Image source={data.image2} style={styles.imageLogo}></Image>\r\n                                                    <Text style={styles.captionText}>{data.caption2}</Text>\r\n                                                </View>\r\n                                                <Text style={styles.smallText}>{'\\n'}</Text>\r\n                                            </View>\r\n                                            <View>\r\n                                                <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                    <Image source={data.image3} style={styles.imageLogo}></Image>\r\n                                                    <Text style={styles.captionText}>{data.caption3}</Text>\r\n                                                </View>\r\n                                                <Text style={styles.smallText}>{'\\n'}</Text>\r\n                                            </View>\r\n                                            </View>\r\n                                        </React.Fragment> \r\n                                        ) \r\n                                }\r\n                                //Text with image\r\n                                else if(data.type == \"imageBlock\"){\r\n                                    //Move picture down\r\n                                    if(data.width*2 > this.state.wWidth){\r\n                                        return(\r\n                                            <React.Fragment key={index}>\r\n                                            <View style={styles.imageTextParentColumn}>\r\n                                                <Text style={[styles.sectionText, {textAlign: this.textAlign(data.width, data.height)}]}>{data.title}</Text>\r\n                                                <Text style={[styles.smallText, {textAlign: this.textAlign(data.width, data.height)}]}>{data.text}</Text>\r\n                                                <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                        <Image source={data.image} style={styles.imageLogo}></Image>\r\n                                                        <Text style={styles.captionText}>{data.caption}</Text>\r\n                                                </View>\r\n                                                \r\n                                            </View>\r\n                                        </React.Fragment> \r\n                                        )\r\n                                    }\r\n                                    else{\r\n                                        return(\r\n                                            <React.Fragment key={index}>\r\n                                                <View style={styles.imageTextParent}>\r\n                                                    <View style={[{flex: 1}, {minWidth: 200}]}>\r\n                                                        <Text style={[styles.sectionText, {textAlign: this.textAlign(data.width, data.height)}]}>{data.title}</Text>\r\n                                                        <Text style={[styles.smallText, {textAlign: this.textAlign(data.width, data.height)}]}>{data.text}</Text>\r\n                                                    </View>\r\n                                                    <View style={[{flex: .1}, {marginLeft: this.scaleImage(data.width, data.height).scaledWidth/2}, {marginRight: this.scaleImage(data.width, data.height).scaledWidth/2}]}>\r\n                                                        <Text style={styles.invisText}>{'\\n\\n'}</Text>\r\n                                                        <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                            <Image source={data.image} style={styles.imageLogo}></Image>\r\n                                                            <Text style={styles.captionText}>{data.caption}</Text>\r\n                                                        </View>\r\n                                                    </View>\r\n                                                    \r\n                                                </View>\r\n                                            </React.Fragment> \r\n                                        )     \r\n                                    }\r\n                                    \r\n                                }\r\n                                //Text with image, no caption\r\n                                else if(data.type == \"imageBlockCaptionless\"){\r\n                                    //Move picture down\r\n                                    if(data.width*2 > this.state.wWidth){\r\n                                        return(\r\n                                            <React.Fragment key={index}>\r\n                                            <View style={styles.imageTextParentColumn}>\r\n                                                <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                        <Image source={data.image} style={styles.imageLogo}></Image>\r\n                                                </View>\r\n                                                <Text style={[styles.sectionText, {fontSize: data.titleSize}, {textAlign: this.textAlign(data.width, data.height)}]}>{data.title}</Text>\r\n                                                <Text style={[styles.smallText, {fontSize: data.textSize}, {textAlign: this.textAlign(data.width, data.height)}]}>{data.text}</Text>\r\n                                                \r\n                                                \r\n                                            </View>\r\n                                        </React.Fragment> \r\n                                        )\r\n                                    }\r\n                                    else{\r\n                                        return(\r\n                                            <React.Fragment key={index}>\r\n                                                <View style={styles.imageTextParent}>\r\n                                                    <View style={[{flex: 1}, {minWidth: 200}]}>\r\n                                                        <Text style={[styles.sectionText, {fontSize: data.titleSize}, {textAlign: this.textAlign(data.width, data.height)}]}>{data.title}</Text>\r\n                                                        <Text style={[styles.smallText, {fontSize: data.textSize}, {textAlign: this.textAlign(data.width, data.height)}]}>{data.text}</Text>\r\n                                                    </View>\r\n                                                    <View style={[{flex: .1}, {marginLeft: this.scaleImage(data.width, data.height).scaledWidth/2}, {marginRight: this.scaleImage(data.width, data.height).scaledWidth/2}]}>\r\n                                                        <Text style={styles.invisText}>{'\\n\\n'}</Text>\r\n                                                        <View style={[styles.captionBox, {width: this.scaleImage(data.width, data.height).scaledWidth}, {height: this.scaleImage(data.width, data.height).scaledHeight}]}>\r\n                                                            <Image source={data.image} style={styles.imageLogo}></Image>\r\n                                                        </View>\r\n                                                    </View>\r\n                                                    \r\n                                                </View>\r\n                                            </React.Fragment> \r\n                                        )     \r\n                                    }\r\n                                    \r\n                                }\r\n                                //Link\r\n                                else if(data.type == \"link\"){\r\n                                    return(\r\n                                        <React.Fragment key={index}>\r\n                                            <View style={{flexDirection:'row'}}>\r\n                                                <Text style={styles.sectionText}\r\n                                                    onPress={() => Linking.openURL(data.url)}>\r\n                                                    {data.preText}\r\n                                                </Text>\r\n                                                <Text style={styles.linkText}\r\n                                                    onPress={() => Linking.openURL(data.url)}>\r\n                                                    {data.linkText}\r\n                                                </Text>\r\n                                            </View>\r\n                                            \r\n                                        </React.Fragment> \r\n                                        ) \r\n                                }\r\n                               \r\n                            }\r\n                        })}\r\n                    </View>\r\n                    \r\n                    </ScrollView>\r\n                    \r\n                    {/**/}\r\n                    \r\n                    \r\n                </LinearGradient>\r\n        }\r\n        \r\n\r\n    }\r\n    \r\n\r\nconst styles = StyleSheet.create({\r\n    //Full container\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    //Image box\r\n    captionBox: {\r\n        backgroundColor: '#ffffff',\r\n        width: 800,\r\n        height: 600,\r\n        //paddingBottom: 18,\r\n        alignSelf: \"center\",\r\n        borderRadius: 20,\r\n    },\r\n    //Gradient Background\r\n    background: {\r\n        flex:1,\r\n    },\r\n    smallText: {\r\n        //flex: 1,\r\n        fontSize: 18,\r\n        //numberOfLines: 5,\r\n        //adjustFontSizeToFit: true,\r\n        color: \"#F4F4F4\",\r\n        fontWeight: \"standard\",\r\n        textAlign: 'justify'\r\n    },\r\n    captionText: {\r\n        //flex: 1,\r\n        fontSize: 18,\r\n        //numberOfLines: 5,\r\n        //adjustFontSizeToFit: true,\r\n        color: \"#000\",\r\n        fontWeight: \"standard\",\r\n        textAlign: 'center'\r\n    },\r\n    linkText: {\r\n        //flex: 1,\r\n        fontSize: 22,\r\n        //numberOfLines: 5,\r\n        //adjustFontSizeToFit: true,\r\n        color: \"#88B3FF\",\r\n        fontWeight: \"bold\",\r\n        textDecorationLine: \"underline\",\r\n        //borderRadius: 15,\r\n        //backgroundColor: \"white\",\r\n        //borderWidth: 8,\r\n        //borderColor: \"white\"\r\n        //textAlign: 'center'\r\n    },\r\n    sectionText: {\r\n        //flex: 1,\r\n        fontSize: 22,\r\n        //numberOfLines: 5,\r\n        //adjustFontSizeToFit: true,\r\n        color: \"#ffffff\",\r\n        fontWeight: \"bold\",\r\n        textAlign: 'justify'\r\n    },\r\n    invisText: {\r\n        //flex: 1,\r\n        fontSize: 22,\r\n        //numberOfLines: 1,\r\n        //adjustFontSizeToFit: true,\r\n        color: \"#000\",\r\n        fontWeight: \"bold\",\r\n        //textAlign: 'justify',\r\n        \r\n    },\r\n    boldText: {\r\n        //flex: 1,\r\n        fontSize: 50,\r\n        color: \"#ffffff\",\r\n        fontWeight: \"bold\",\r\n        alignSelf: 'center'\r\n    },\r\n    pageContainerTop: {\r\n        flex: .1,\r\n        //flexDirection: 'row',\r\n    },\r\n    //Container below nav bar\r\n    pageContainer: {\r\n        flex: 1,\r\n        //flexDirection: 'row',\r\n        marginLeft: '5%',\r\n        marginRight: '5%',\r\n    },\r\n    imageLogo: {\r\n        flex: 1,\r\n        //width: 600,\r\n        //height: 500,\r\n        borderRadius: 20,\r\n        \r\n    },\r\n    imageTextParent: {\r\n        //flex: 1,\r\n        flexDirection: 'row',\r\n\r\n    },\r\n    imageTextParentColumn: {\r\n        //flex: 1,\r\n        flexDirection: 'column',\r\n\r\n    },\r\n    alignRow: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n    }\r\n\r\n      \r\n})\r\n","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\n\r\nimport Cover from '../assets/2_4.jpg';\r\n\r\n\r\nexport const MainData = [\r\n    {\r\n        title: \"\",\r\n\r\n    },\r\n    {\r\n        type: \"imageBlockCaptionless\",\r\n        image: Cover,\r\n        width: 350,\r\n        height: 350,\r\n        caption: <>\r\n        test</>,\r\n        title: <>  \r\n        {'\\n\\n'}Hello, I am Dominik.</>,\r\n        titleSize: 30,\r\n        textSize: 22,\r\n        text: <>\r\n        I am currently studying Computer Engineering at the University of Florida. \r\n                            I am always coming up with ideas and working on projects to learn about different technologies, and applying \r\n                            them to solve problems. My passions are robotics, computers, programming, and crypto, and my\r\n                            favorite outdoor activity is mountain biking. At UF I am a part of the Polish Student Association, ACM, GAITOR Club\r\n                            and the Machine Intelligence Lab.{'\\n\\n'}My goal is to work on projects that I enjoy in a team environment. I value\r\n                            other’s skills as much as my own, and I know with the right team, there are no limits to what can be \r\n                            accomplished . I hope to work on projects that require developing new solutions to a problem or automating\r\n                            and improving an existing one. I also want to continue to work on my own projects because I like the challenge\r\n                            of creating something by myself and bringing my ideas to life.\r\n        {'\\n\\n'}</>,\r\n    },\r\n\r\n];","// MainPage screen\r\n\r\nimport React from 'react';\r\nimport {View, Text, StyleSheet, Image, useWindowDimensions, Button, Platform} from 'react-native';\r\nimport NavigationBar from \"../components/navigationbar.js\";\r\nimport NavStyle from \"../styles/navStyle\";\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Dimensions } from 'react-native';\r\nimport TextPage from \"../components/textPage.js\";\r\nimport { MainData } from './mainData.js';\r\n\r\nexport default class MainPage extends React.Component {\r\n\r\n\r\n    onScreenLoad = () => {\r\n        console.log(\"Loaded\");\r\n\r\n    }\r\n\r\n    static path = \"home\";\r\n\r\n    state = {  \r\n        //Initial width and height states\r\n        wHeight: Dimensions.get('window').height,\r\n        wWidth: Dimensions.get('window').width\r\n    }  \r\n\r\n    \r\n    //Universal Navigation Function\r\n    navigateTo = (x) => {\r\n        //Check if is already on that page\r\n        if(x != this.props.navigation.state.routeName){\r\n            this.props.navigation.navigate(x);\r\n        }\r\n      };\r\n\r\n    //Function to keep track of window width/height\r\n    componentDidMount() {\r\n        Dimensions.addEventListener(\"change\", (handler) => \r\n        {this.setState({wHeight: handler.window.height}); \r\n        this.setState({wWidth: handler.window.width});})  \r\n        console.log(\"Loaded2\"); \r\n        fetch(' http://api.dkapps.tk/api', {\r\n            method: 'POST',\r\n            headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n        appID: 'dominikSiteData',\r\n        ip: 'testReact'   \r\n        })\r\n        });\r\n    };\r\n\r\n    //Function to scale text/images based on window size\r\n    scaleSize (size) {\r\n        return (this.state.wWidth)/2543 * size;\r\n    }\r\n    //fontSize: this.scaleSize(50)\r\n\r\n    \r\n    render() {\r\n        \r\n        return <View style={styles.container}>\r\n            \r\n            <View style={NavStyle.navBarParent}>\r\n                <NavigationBar navigateTo={this.navigateTo} currentPage='MainPage'/>\r\n            </View>\r\n            \r\n            \r\n            <TextPage pageData={MainData}></TextPage>\r\n\r\n\r\n        </View>\r\n    }\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    //Full container\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'white',\r\n    },\r\n    //Container below nav bar\r\n    pageContainer: {\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n    },\r\n    //Top page space\r\n    pageContainerTop: {\r\n        flex: .2,\r\n        flexDirection: 'row',\r\n    },\r\n    imageLogo: {\r\n        width: 10,\r\n        height: 10,\r\n        borderRadius: 30\r\n    },\r\n    boldText: {\r\n        //flex: 1,\r\n        fontSize: 50,\r\n        color: \"#ffffff\",\r\n        fontWeight: \"bold\"  \r\n    },\r\n    smallText: {\r\n        //flex: 1,\r\n        //fontSize: 30,\r\n        //numberOfLines: 5,\r\n        adjustFontSizeToFit: true,\r\n        color: \"#ffffff\",\r\n        fontWeight: \"standard\",\r\n        textAlign: 'justify'\r\n    },\r\n    viewLeftContainer: {\r\n        flex: 1,\r\n        marginLeft: '10%',\r\n        marginRight: '10%'\r\n    },\r\n    viewRightContainer: {\r\n        flex: .6,\r\n        //marginLeft: '10%',\r\n    },\r\n    //Gradient Background\r\n    background: {\r\n        flex: 1,\r\n    },\r\n\r\n      \r\n})","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\n\r\n//import Web from '../ExperienceData/webarchitecture.jpg';\r\n//import Cover from '../ExperienceData/cover.png';\r\n\r\n\r\nexport const ExperienceData = [\r\n    {\r\n        title: \"Experience\",\r\n\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}HyFrontier Technologies - Robotics Engineering Internships\r\n        </>,\r\n        text: <>\r\n        While working in the robotics engineering design team at Hyfrontier Technologies, I designed and implemented custom machinery and robots for the Hygro product assembly. Their unique assembly process needed custom solutions to be automated while improving quality control. Applying my high school robotics experience and communicating with my mentor, I built two robots and one fixture that automated and optimized this process. For each solution I got the required specifications and researched materials, motion components, controllers, sensors and their cost. I sketched and 3D modeled in Autodesk Inventor to compare and optimize designs. After communicating with the engineers, I assembled, programmed, tested and ensured safety during the robot operation. I gained experience in aligning to design specifications, computer aided design, prototyping, communicating and implementing custom solutions.\r\n        {'\\n'}</>,\r\n    },\r\n    \r\n    \r\n    \r\n    \r\n\r\n];","// Experience screen\r\n\r\nimport React from 'react';\r\nimport {View, Text, StyleSheet, Button, Platform} from 'react-native';\r\nimport NavigationBar from \"../components/navigationbar.js\";\r\nimport NavStyle from \"../styles/navStyle\";\r\nimport TextPage from \"../components/textPage.js\";\r\n\r\nimport { ExperienceData } from './ExperienceSrc/experienceData.js';\r\n\r\nconst isWeb = Platform.OS === 'web';\r\n\r\nexport default class Projects extends React.Component {\r\n\r\n\r\n    //Universal Navigation Function\r\n    navigateTo = (x) => {\r\n        //Check if is already on that page\r\n        if(x != this.props.navigation.state.routeName){\r\n            this.props.navigation.navigate(x);\r\n        }\r\n      };\r\n\r\n    static path = \"experience\";\r\n\r\n    render() {\r\n        return <View  style={styles.container}>\r\n            <View style={NavStyle.navBarParent}>\r\n                <NavigationBar navigateTo={this.navigateTo} currentPage='Experience'/>\r\n            </View>\r\n\r\n            <TextPage pageData={ExperienceData}></TextPage>\r\n           \r\n\r\n        </View>\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n})","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\n\r\n//import Web from '../ExperienceData/webarchitecture.jpg';\r\n//import Cover from '../ExperienceData/cover.png';\r\n\r\n\r\nexport const ContactData = [\r\n    {\r\n        title: \"Contact\",\r\n\r\n    },\r\n    {\r\n        type: \"link\",\r\n        linkText: \"github.com/Dominikk7\",\r\n        url: \"https://github.com/Dominikk7\",\r\n        preText: \"Link to GitHub :  \"\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Email: \r\n        </>,\r\n        text: <></>,\r\n    },\r\n    \r\n    \r\n    \r\n\r\n];","// contact screen\r\n\r\nimport React from 'react';\r\nimport {View, Text, StyleSheet, Linking, Button, Platform} from 'react-native';\r\nimport NavigationBar from \"../components/navigationbar.js\";\r\nimport NavStyle from \"../styles/navStyle\";\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nimport TextPage from \"../components/textPage.js\";\r\nimport { ContactData } from './ContactSrc/contactData.js';\r\n\r\n\r\nexport default class Projects extends React.Component {\r\n\r\n\r\n    //Universal Navigation Function\r\n    navigateTo = (x) => {\r\n        //Check if is already on that page\r\n        if(x != this.props.navigation.state.routeName){\r\n            this.props.navigation.navigate(x);\r\n        }\r\n      };\r\n\r\n    static path = \"contact\";\r\n\r\n    render() {\r\n        return <View style={styles.container}>\r\n            <View style={NavStyle.navBarParent}>\r\n                <NavigationBar navigateTo={this.navigateTo} currentPage='Contact'/>\r\n            </View>\r\n\r\n            <LinearGradient\r\n                colors={['#2b6ef2', '#103276']}\r\n                style={styles.background}\r\n                end = {[1, 1]}>\r\n                <View style={styles.pageContainer}>\r\n                    <View style={{flexDirection:'row'}}>\r\n                    <Text style={styles.sectionText}\r\n                        onPress={() => Linking.openURL(\"https://github.com/Dominikk7\")}>\r\n                        {\"\\nLink to GitHub : \"}  \r\n                    </Text>\r\n                    <Text style={styles.linkText}\r\n                        onPress={() => Linking.openURL(\"https://github.com/Dominikk7\")}>\r\n                        {\"\\ngithub.com/Dominikk7\"}\r\n                    </Text>\r\n                    </View>\r\n                    <View style={{flexDirection:'row'}}>\r\n                    <Text style={styles.sectionText}>\r\n                        {\"\\nEmail : \"}  \r\n                    </Text>\r\n                    <Text style={styles.normalText}>\r\n                        {\"\\ndominik.kapuscinski3@gmail.com\"}\r\n                    </Text>\r\n                    </View>\r\n                </View>     \r\n            \r\n\r\n            </LinearGradient>\r\n            \r\n           \r\n\r\n        </View>\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    linkText: {\r\n        //flex: 1,\r\n        fontSize: 22,\r\n        //numberOfLines: 5,\r\n        //adjustFontSizeToFit: true,\r\n        color: \"blue\",\r\n        fontWeight: \"bold\",\r\n        textDecorationLine: \"underline\",\r\n        //textAlign: 'center'\r\n    },\r\n    sectionText: {\r\n        //flex: 1,\r\n        fontSize: 22,\r\n        //numberOfLines: 5,\r\n        //adjustFontSizeToFit: true,\r\n        color: \"#ffffff\",\r\n        fontWeight: \"bold\",\r\n        textAlign: 'justify'\r\n    },\r\n    normalText: {\r\n        //flex: 1,\r\n        fontSize: 22,\r\n        //numberOfLines: 5,\r\n        //adjustFontSizeToFit: true,\r\n        color: \"#ffffff\",\r\n        fontWeight: \"normal\",\r\n        textAlign: 'justify'\r\n    },\r\n    background: {\r\n        flex:1,\r\n    },\r\n    pageContainer: {\r\n        flex: 1,\r\n        //flexDirection: 'row',\r\n        marginLeft: '5%',\r\n        marginRight: '5%',\r\n    },\r\n})","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\n\r\nimport Img1 from '../Crypto/cover2.jpg';\r\nimport PriceChart from '../Crypto/priceChart.png';\r\nimport Garage1 from '../Crypto/1.jpg';\r\n\r\nimport Frame1 from '../Crypto/frame1.jpg';\r\nimport Frame2 from '../Crypto/frame2.jpg';\r\nimport Riser from '../Crypto/riser.jpg';\r\n\r\nimport GpuBox1 from '../Crypto/gpuBox1.jpg';\r\nimport GpuBox2 from '../Crypto/gpuBox2.jpg';\r\nimport Garage2 from '../Crypto/2.jpg';\r\n\r\nimport Garage3 from '../Crypto/3.jpg';\r\nimport Garage4 from '../Crypto/4.jpg';\r\nimport Garage5 from '../Crypto/5.png';\r\n\r\n\r\nexport const CryptoData = [\r\n    {\r\n        title: \"Cryptomining\",\r\n\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Initial Interest\r\n        </>,\r\n        text: <>\r\n        I first heard about crypto mining around 2018. This is when Ethereum and crypto in general had its first major spike in interest\r\n         as seen on the chart. At the time I didn’t have any computer hardware powerful enough to start. My interest in cryptocurrency and\r\n          high-performance computers did not stop though. Over the next few years, I invested myself into learning computer aided design,\r\n           3d rendering, programming and computer hardware. I also began working towards building a high performance GPU centered computer\r\n            to render 3d animations, as well as be ready to start crypto mining if it ever becomes profitable again; I didn’t want to miss the\r\n             chance a second time. {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"image\",\r\n        image: PriceChart,\r\n        width: 1000,\r\n        height: 450,\r\n        caption: <>\r\n        ETH price data</>\r\n    },\r\n    {\r\n        type: \"imageBlock\",\r\n        image: Garage1,\r\n        width: 350,\r\n        height: 300,\r\n        caption: <>\r\n        Initial Garage Test</>,\r\n        title: <>\r\n        {'\\n'}Early Start\r\n        </>,\r\n        text: <>\r\n        Starting late 2020 I started to see a serious potential in GPU mining again as the profitability just began to increase. I built an aluminum frame for the GPUs I had been using for rendering and wanted to collect real-world results for performance, power draw and profitability compared to online calculators. The initial challenges involved software, overclocking stability, and thermal management in the room. Another experiment I tried was moving the computer into the garage to see if it can run at full speed in the higher ambient temperature. With enough airflow in the open cases, the test was a success. The heat and noise problem inside house was solved. The higher ambient temperature did not affect the hashrate and fan speeds were still adequate. Humidity levels were higher but would only be harmful enough to worry if the computers stayed off. While the computers were at much higher temperatures than ambient and had airflow there was minimal risk of corrosion. \r\n        {'\\n\\n'} </>,\r\n    },\r\n    {\r\n        type: \"imageBlock\",\r\n        image: Frame1,\r\n        width: 350,\r\n        height: 300,\r\n        caption: <>\r\n        5 GPU Frame</>,\r\n        title: <>  \r\n        {'\\n\\n'}GPU Frame</>,\r\n        text: <>\r\n        The next step for me to expand was to start building a graphics card frame and use riser cards. Most computer cases can only comfortably fit 2-3 GPUs and consumer motherboards typically have 2-3 PCIE 16x connectors. Additionally, traditional computer cases don’t provide good airflow for the cards and keep them spaced close together. This can all be overcome by  mounting the cards on a dedicated frame. The cards interface with the motherboard using PCIE 1x connector riser cards. This means there can be up to 6 GPUs per motherboard using the smaller, more abundant connector. PCIE 16x is significantly faster at transferring data than 1x, however hashrate is not affected because there is not enough data send back and forth to the GPU for it to be a bottleneck. \r\nI designed the GPU frame in Autodesk Inventor before cutting, and assembling it out of aluminum extrusion. The initial design allowed for up to 5 GPUs in the open air. Additional fans also helped lower temperatures .\r\n{'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"doubleImage\",\r\n        image: Frame2,\r\n        image2: Riser,\r\n        width: 500,\r\n        height: 300,\r\n        caption: <>\r\n        Full GPU Frame</>,\r\n        caption2: <>\r\n        PCIE Riser Card</>\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Scaling Hardware\r\n        </>,\r\n        text: <>\r\n        The success of the mining frame, and the results from all my previous tests convinced me to fully invest myself in developing, managing and optimizing the mining farm. To continue, I needed more hardware. At the time I started mining, GPUs with over 4gb of VRAM were required to run efficiently. I also made sure to find high quality power supplies and avoided the wrong types of splitters and overloading the PSU to avoid the most common fire hazards. I secured a very good bulk deal for AMD RX 480 and 580 8gb cards, a few motherboards and power supplies. I bought more cards in bulk than I initially needed to test and resell them to offset some of the cost, reducing my estimated ROI time. \r\nOver the next few weeks, I spent hours in the garage every day building up more frames, more computers, and more wiring. Initially scaling sounded easy, but I ran into many failures and challenges before everything was functional, stable, and self-sufficient. \r\n{'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"tripleImage\",\r\n        image: GpuBox1,\r\n        image2: GpuBox2,\r\n        image3: Garage2,\r\n        width: 400,\r\n        height: 350,\r\n        caption: <>\r\n        RX 480 4gb</>,\r\n        caption2: <>\r\n        RX 480, RX 580 8gb</>,\r\n        caption3: <>\r\n        Garage Setup</>\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Challenges: Solutions and growth{'\\n'}   - Troubleshooting hardware \r\n        </>,\r\n        text: <>After putting together all the hardware including GPUs, risers, motherboards, and power for the first time it did not immediately all work together. There are too many components involved and too much untested hardware being put together. The first challenge was getting any display output. I realized the only way to get everything to work is to unit test everything I could and slowly build it up. To get display output I needed to reseat some riser connectors and leave all but one disconnected. Once more GPUs were connected the computer would freeze on the post screen or on the boot screen to the OS. It turns out plugging in six graphics cards requires additional setup. The process of figuring everything out was tedious, but I could see progress. It turns out the BIOS needed to be updated and some settings regarding PCIE lanes needed to be changed, as well as disabling audio controller, built in wifi and some USB ports. The motherboard only has a certain amount of high speed connectivity and it all needed to be allocated to graphics.  \r\n        {'\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n           - Troubleshooting software \r\n        </>,\r\n        text: <>\r\n        At first I made the mistake of using windows OS to run the mining software; It was what I was most familiar with so it was easy to start with. It worked well with the couple GPUs per computer, but after using six there were issues. The most frustrating issue was installing drivers and getting all the graphics cards to detect without errors. Additionally to maximum performance I needed to modify and flash the GPU BIOS. This further complicated the driver installation process. To further optimize the poer draw and hashrate the core clock needed to be dropped, power limit dropped and memory clock increased. The Ethereum hashing algorithm mainly relies on memory so the cards can be undervolted and run even cooler. One of the issues I ran into is stability. After a few hours if there was any error or crash all the overclocks were reset to stock or windows would freeze. I just lowered the overclock and had to check on the computers frequently through vnc remote desktop to see if there were any issues. \r\n        {'\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n           - Network\r\n        </>,\r\n        text: <>\r\n        The network signal was very weak in the garage and the network connection was slow and unstable. Additionally, each computer needed to have its own wifi card. Buying a long network cable and wiring it through the attic was an option, but would be tedious. I solved the problem by taking an old router and installing the DDWRT custom firmware on it. This allowed me to have one router in the garage connect to the main router and forward the connection to the computers through short ethernet cables. This increased the network stability and removed the need for wifi cards.  \r\n        {'\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n           - Power\r\n        </>,\r\n        text: <>\r\n        Once I had more cards running on a larger scale I was surprised to find out everything shut down when I turned on the microwave in the kitchen. That’s when I learned about the importance of accounting for exactly how much power devices on a circuit use and circuit breakers. I didn’t consider power being one of the limitations when I first thought of scaling the mining. After that incident I got a new line of wire installed to the garage with more than enough power than I would need in case of future upgrades. \r\n         {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        Evolution\r\n        </>,\r\n        text: <>\r\n        Over time I continued to trade and upgrade the graphics cards and added another motherboard. At this point I was tired of the low stability and checking the overclocks or restarting for another windows update. In my research to solve this I discovered Hive OS. It’s a Linux based system that is designed for multi-GPU computers for mining. After installing and configuring everything, all the computers and GPUs could be managed from a single UI. I could apply better overclocks without crashes, have more advanced fan control, and have much better monitoring. Eventually the computers could run weeks without intervention; they could restart themselves on any rare error and auto power on when there was a brief power outage. It was stable. \r\nWith the added GPUs came added heat. I needed to design a better cooling solution for the computer and for the garage. The solution was to draw air in from the sides and to exhaust it all outside through a chimney like opening in the ceiling. This solution worked very well and the cards and garage stayed cool even on the hottest summer days. All the hot air rose upwards and was expelled allowing fresh air to enter.\r\n{'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"tripleImage\",\r\n        image: Garage3,\r\n        image2: Garage4,\r\n        image3: Garage5,\r\n        width: 400,\r\n        height: 400,\r\n        caption: <>\r\n        Cooling solution (closed)</>,\r\n        caption2: <>\r\n        Cooling solution (opened for access)</>,\r\n        caption3: <>\r\n        Ceiling exhaust</>\r\n    },\r\n    {\r\n        type: \"imageBlock\",\r\n        image: Img1,\r\n        width: 350,\r\n        height: 300,\r\n        caption: <>\r\n        Dell PowerEdge R720</>,\r\n        title: <>  \r\n        {'\\n\\n'}CHIA Cryptomining</>,\r\n        text: <>\r\n        During the time working on the main GPU mining farm, I learned about another coin, CHIA, where mining was storage based. Instead of Proof of Work, the coin used Proof of Space. Essentially miners need a lot of hard drive space to get mining rewards. I found a good deal on a Dell PowerEdge R720 server with around 60 TB of drive space. In the process of configuring it I learned about many server specific technologies such as the external drive bays, setting up virtual disks, RAID, and the Dell specific iDRAC for remote management. \r\n        {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        Outcomes\r\n        </>,\r\n        text: <>\r\n        I enjoyed managing every part of the project: computers, cooling, power, cost to operate, initial costs, upgrades, and improvements. Eventually it ran stable in its own for months, a big step from checking or fixing something every single day. \r\n        {'\\n\\n\\n'}</>,\r\n    },\r\n\r\n];","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport TextPage from \"../../../components/textPage.js\";\r\nimport { CryptoData } from './cryptoData.js';\r\n\r\n\r\nexport default class Crypto extends React.Component {\r\n\r\n    static path = \"projects/cryptomining\";\r\n\r\n    render() {\r\n    \r\n        return <View style={styles.container}>\r\n            \r\n            <TextPage pageData={CryptoData}></TextPage>\r\n\r\n        </View>\r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    //Full container\r\n    container: {\r\n        flex: 1,\r\n    },\r\n\r\n      \r\n})\r\n\r\n","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\n\r\nimport Web from '../ZoomSniper/webarchitecture.jpg';\r\nimport Cover from '../ZoomSniper/cover.png';\r\n\r\n\r\nexport const ZoomData = [\r\n    {\r\n        title: \"Zoom Sniper\",\r\n\r\n    },\r\n    {\r\n        type: \"link\",\r\n        linkText: \"zoom.dkapps.tk\",\r\n        url: \"https://zoom.dkapps.tk\",\r\n        preText: \"Link to project :  \"\r\n    },\r\n    {\r\n        type: \"link\",\r\n        linkText: \"github.com/Dominikk7/Zoom-Sniper\",\r\n        url: \"https://github.com/Dominikk7/Zoom-Sniper\",\r\n        preText: \"Link to GitHub :  \"\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Inspiration\r\n        </>,\r\n        text: <>\r\n        I participated in the UF Swamphacks VIII hackathon where hundreds of participants from all over the country team up to create a project and compete for awards. I worked with a partner to create the Zoom Sniper app. We wanted to create something that would be relevant, useful for students, and unique. The issue we identified was looking for my online lecture links every day before joining. In less than three days, we believe we fully solved the problem by creating Zoom Sniper. Our team was awarded the First Time Hacker Award.\r\n        {'\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Functionality\r\n        </>,\r\n        text: <>\r\n        The application allows users to organize links onto a list and opens them on a user defined schedule. For example, I can make my programming lecture open every Monday, Wednesday, and Friday at a certain time. The UI displays the list with details like the name, link, weekday, and time. Links can easily be added and removed. \r\n        {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"image\",\r\n        image: Cover,\r\n        width: 600,\r\n        height: 500,\r\n        caption: <>\r\n        App Screenshot</>\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Technical Details\r\n        </>,\r\n        text: <>\r\n         The app was made in C# Windows Form App .NET 4.6. Visual studio makes is simple to create a user interface and quickly create an app. .NET 4.6 is preinstalled on Windows 10 so the end user would not need to install any more dependencies to run the app. The links are represented as object that we store in a list. When a link is added or deleted, the list is serialized and saved in AppData for persistent storage. Upon opening the app the file is deserialized and the data is restored. The link checking system works by running an async task to compare the current date and time to the time set by the user. One of the most challenging parts of the project was the time comparison algorithm in the async task. Eventually we fixed all the issues and submitted the project within the deadline. I still run the app today without any problems. The source code is available on my GitHub page.\r\n         {'\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Web Server\r\n        </>,\r\n        text: <>\r\n          Another goal we had for the project was to have it be accessible for everyone through a public website. I have experience with servers, virtual machines and routing so self-hosting a server was a reachable goal within the time frame. The website was a simple HTTP file with a download button. It was run on my server inside a virtual machine. To have the server visible on the web I used a port forwarded kemp load balancer. I got a free .tk domain and used Cloudflare to mask my IP address and make the connection secure. When the user types the domain, Cloudflare forwards the request to my load balancer. The load balancer looks at the domain and forwards it to the appropriate server, in this case the web server inside the VM. The main function of the load balancer is to only port forward one port. It makes it easy to route multiple servers based on the incoming domain. It is easier to take care of all the routing internally instead of forwarding all the servers separately. \r\n          {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"image\",\r\n        image: Web,\r\n        width: 1000,\r\n        height: 450,\r\n        caption: <>\r\n        Web Architecture</>\r\n    },\r\n\r\n    \r\n    \r\n    \r\n\r\n];","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport TextPage from \"../../../components/textPage.js\";\r\nimport { ZoomData } from './zoomData.js';\r\n\r\n\r\nexport default class Zoom extends React.Component {\r\n\r\n    static path = \"projects/zoomSniper\";\r\n\r\n    render() {\r\n    \r\n        return <View style={styles.container}>\r\n            \r\n            <TextPage pageData={ZoomData}></TextPage>\r\n\r\n        </View>\r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    //Full container\r\n    container: {\r\n        flex: 1,\r\n    },\r\n\r\n      \r\n})\r\n\r\n","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\n\r\nimport Robot1 from '../Rendering/1.jpg';\r\nimport Robot2 from '../Rendering/robot2.jpg';\r\nimport Robot3 from '../Rendering/slide2.png';\r\nimport Robot4 from '../Rendering/slides.png';\r\n\r\nimport India1 from '../Rendering/line_1.png';\r\nimport India2 from '../Rendering/Wed1.jpg';\r\n\r\nimport Key1 from '../Rendering/Key1.png';\r\nimport Key2 from '../Rendering/Key2.png';\r\n\r\n\r\n\r\nexport const RenderingData = [\r\n    {\r\n        title: \"3D Modelling | Rendering | Animation\",\r\n\r\n    },\r\n    {\r\n        type: \"link\",\r\n        linkText: \"youtube.com/channel/UCNzpJeHb1WCdrQzMYukMFuw\",\r\n        url: \"https://www.youtube.com/channel/UCNzpJeHb1WCdrQzMYukMFuw\",\r\n        preText: \"Link to youtube :  \"\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Inspiration\r\n        </>,\r\n        text: <>\r\n        I started to learn about computer aided design (CAD) after my freshman year of high school. I was in the robotics club and became motivated by all the clever, sophisticated, and clean designs teams from all over the world came up with for the competition. After talking with a world class team, I decided I needed to learn CAD. \r\n        {'\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Main Projects{'\\n'} -  FTC Robotics\r\n        </>,\r\n        text: <>\r\n        I participated in the First Tech Challenge in all four years of high school. Once I started using CAD to design major parts before building them, the quality of the robot significantly increased. I learned the importance of CAD which includes design optimization, collaboration, and iterative design.\r\nOverall, I designed the majority of three robots in Autodesk Inventor. Each robot was designed to complete a unique set of tasks, had unique drivetrains, components and 3d printed parts. One of my largest projects was to take the robot 3d models and create an animation that showcases all the parts. \r\n{'\\n\\n'}</>,\r\n    },\r\n\r\n    {\r\n        type: \"image\",\r\n        image: Robot1,\r\n        width: 1000,\r\n        height: 500,\r\n        caption: <>\r\n        Animation Preview</>\r\n    },\r\n    {\r\n        type: \"link\",\r\n        linkText: \"youtu.be/R7WQLNoY58g\",\r\n        url: \"https://youtu.be/R7WQLNoY58g\",\r\n        preText: \"Link to animation :  \"\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <></>,\r\n        text: <>\r\n        To create the animation, I imported the robot files into Cinema 4D. There, I structured all the parts to prepare them to be grouped and animated. Then I began setting up the scenes, keyframes and cameras. Making the animation photorealistic was another goal I set for myself. I found the Redshift GPU rendering plugin and learned all about applying materials, lighting, cameras to simulate the real world. The final product took hundreds of hours to render on multiple GPUs. From start to finish I created everything over the course of around a 1 year. \r\n        {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>Robot CAD Samples</>,\r\n        text: <></>,\r\n    },\r\n    {\r\n        type: \"tripleImage\",\r\n        image: Robot2,\r\n        image2: Robot3,\r\n        image3: Robot4,\r\n        width: 400,\r\n        height: 350,\r\n        caption: <>\r\n        2018-2019 Robot</>,\r\n        caption2: <>\r\n        Servo Linear Slider Mechanism</>,\r\n        caption3: <>\r\n        Dual Motor Linear Slider</>\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'} -  Line Following Robot\r\n        </>,\r\n        text: <>For one of our robotic team outreach programs, I designed a simple line following robot that is made up of Arduino components and a 3d printed frame. My friend and I travelled to India for a week to teach the robotics program he created there the basics of programming and CAD. They had access to a 3d printer; We printed, assembled and programmed the robot to follow a line on the table. \r\n        {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"doubleImage\",\r\n        image: India1,\r\n        image2: India2,\r\n        width: 400,\r\n        height: 350,\r\n        caption: <>\r\n        Line Followind Robot Design</>,\r\n        caption2: <>\r\n        Me teaching CAD to a group of students</>,\r\n    },    \r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'} -  Keychains\r\n        </>,\r\n        text: <>A smaller 3D printing project I designed and printed two motorcycle keychains. I created them when I was learning onshape and scaled them after my motorcycles. I plan to continue making some keychains of cars and other types of motorcycles for fun. \r\n        {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"doubleImage\",\r\n        image: Key1,\r\n        image2: Key2,\r\n        width: 400,\r\n        height: 300,\r\n        caption: <>\r\n        Suzuki DRZ 400 Keychain</>,\r\n        caption2: <>\r\n        Honda Grom Keychain</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'} -  Other Animations\r\n        </>,\r\n        text: <>I created a few other animations such as simulating water, putting a 3D model into a real video and making an explosion simulation.  These are all on my YouTube channel linked at the top of the page.{'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Software Summary{'\\n'} -  Autodesk Inventor\r\n        </>,\r\n        text: <>The CAD software I am most familiar with is Autodesk Inventor. I used it to design and assemble all the robot parts, as well as design two robots and one fixture during my internship at HyFrontier Technologies. \r\n        </>\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n         -  Fusion 360\r\n        </>,\r\n        text: <>I have used Fusion 360 to collaborate on a few robotics projects, but I prefer Autodesk Inventor for larger assemblies for performance reasons. </>\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n         -  Onshape\r\n        </>,\r\n        text: <>I learned how to use onshape at my Engineering Design and Society class at UF. I used it to make the keychain and a robot that automatically opens and closes blinds depending on the time of day\r\n        </>\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n         -  Cinema 4D + Redshift Render\r\n        </>,\r\n        text: <>I use these to create animations once I have a part or assembly I want to render. The Redshift Render plugin allows me to use GPU rendering that renders quickly and photorealistically.\r\n        {'\\n\\n'}\r\n        </>\r\n    },\r\n\r\n   \r\n\r\n    \r\n    \r\n    \r\n\r\n];","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport TextPage from \"../../../components/textPage.js\";\r\nimport { RenderingData } from './renderingData.js';\r\n\r\n\r\nexport default class Rendering extends React.Component {\r\n\r\n    static path = \"projects/rendering\";\r\n\r\n    render() {\r\n    \r\n        return <View style={styles.container}>\r\n            \r\n            <TextPage pageData={RenderingData}></TextPage>\r\n\r\n        </View>\r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    //Full container\r\n    container: {\r\n        flex: 1,\r\n    },\r\n\r\n      \r\n})\r\n\r\n","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\n\r\nimport Web from '../ZoomSniper/webarchitecture.jpg';\r\nimport Cover from '../ImageEncoder/1.png';\r\n\r\n\r\nexport const ImageData = [\r\n    {\r\n        title: \"Image Encoder\",\r\n\r\n    },\r\n    {\r\n        type: \"link\",\r\n        linkText: \"image.dkapps.tk\",\r\n        url: \"https://image.dkapps.tk\",\r\n        preText: \"Link to project :  \"\r\n    },\r\n    {\r\n        type: \"link\",\r\n        linkText: \"coming soon\",\r\n        url: \"https://github.com/Dominikk7\",\r\n        preText: \"Link to GitHub :  \"\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Inspiration\r\n        </>,\r\n        text: <>\r\n        I wanted to create an app that allows users to hide text and messages in pictures and decode them later. When I first heard of steganography, I was very interested. I wanted to try to make an algorithm that hides text in images myself. I was familiar with Windows Form App from my Zoom Sniper project, so it was easy to design the UI for windows. If I was to remake the project, I would make it a web app in React. Web apps are more accessible on various devices and don’t require installation of additional files. \r\n        {'\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Functionality\r\n        </>,\r\n        text: <>\r\n        The app allows users to select a source image, write text, and save the image with the text. Later, users can select an image and decode it.\r\n        {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"image\",\r\n        image: Cover,\r\n        width: 600,\r\n        height: 300,\r\n        caption: <>\r\n        App Screenshot</>\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Technical Details\r\n        </>,\r\n        text: <>\r\n         The algorithm that I created to store the word data is simple and does not noticeably change the image. First, I take the image and put all the pixels in an array. To put the text in the image, each letter’s ASCII value is set as the blue value for one pixel. Then the image is reconstructed. The result is a subtle change in a line of pixels in the image starting at the upper left side. To decode an image the value of the blue pixels is taken and converted back to characters. The process of looking through all the pixels in the image takes a long time depending on the size. The first improvement I would make is passing values by reference to optimize the time taken to process an image. \r\n         {'\\n'}</>,\r\n    },\r\n    {\r\n        type: \"block\",\r\n        title: <>\r\n        {'\\n'}Web Server\r\n        </>,\r\n        text: <>\r\n          The web server uses the same architecture as my Zoom Sniper project does. It was simple to host another page using XAMPP, add another virtual server in the load balancer and update the DNS records in Cloudflare so the website is accessible through image.dkapps.tk. \r\n          {'\\n\\n'}</>,\r\n    },\r\n    {\r\n        type: \"image\",\r\n        image: Web,\r\n        width: 1000,\r\n        height: 450,\r\n        caption: <>\r\n        Web Architecture</>\r\n    },\r\n\r\n    \r\n    \r\n    \r\n\r\n];","import React from 'react';\r\nimport {View, Text, StyleSheet, Image, Button, Platform} from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport TextPage from \"../../../components/textPage.js\";\r\nimport { ImageData } from './imageData.js';\r\n\r\n\r\nexport default class Zoom extends React.Component {\r\n\r\n    static path = \"projects/imageEncoder\";\r\n\r\n    render() {\r\n    \r\n        return <View style={styles.container}>\r\n            \r\n            <TextPage pageData={ImageData}></TextPage>\r\n\r\n        </View>\r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    //Full container\r\n    container: {\r\n        flex: 1,\r\n    },\r\n\r\n      \r\n})\r\n\r\n","// Home.js, just a name of the stack navigation\r\n\r\nimport {createStackNavigator} from 'react-navigation-stack';\r\nimport {createAppContainer} from 'react-navigation';\r\nimport {createBrowserApp} from \"@react-navigation/web\";\r\nimport {createSwitchNavigator} from 'react-navigation';\r\n\r\nimport Projects from \"./pages/Projects\";\r\nimport MainPage from \"./pages/mainPage\";\r\nimport Experience from \"./pages/experience\";\r\nimport Contact from \"./pages/contact\";\r\nimport {Platform} from \"react-native\";\r\n\r\nimport Crypto from './pages/ProjectSrc/Crypto/crypto.js';\r\nimport Zoom from './pages/ProjectSrc/ZoomSniper/zoom.js';\r\nimport Rendering from './pages/ProjectSrc/Rendering/rendering.js';\r\nimport Image from './pages/ProjectSrc/ImageEncoder/image.js';\r\n\r\nconst isWeb = Platform.OS === 'web';\r\n\r\nconst Home = createSwitchNavigator( //or createStackNavigator\r\n    {\r\n        MainPage: MainPage,\r\n        Projects: Projects,\r\n        Experience: Experience,\r\n        Contact: Contact,\r\n        Crypto: Crypto,\r\n        Zoom: Zoom,\r\n        Rendering: Rendering,\r\n        Image: Image,\r\n    },\r\n    {\r\n        navigationOptions: {\r\n            headerTintColor: '#fff',\r\n            headerStyle: {\r\n                backgroundColor: '#000',\r\n            },\r\n            scrollEnabled: false,\r\n        },\r\n    }\r\n);\r\n\r\n//const container = createAppContainer(Home);\r\nconst container = isWeb ? createBrowserApp(Home): createAppContainer(Home);\r\n\r\n\r\nexport default container;","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport Home from \"./home\";\n\nexport default function App() {\n  return (\n    <View style={styles.outer}>\n      <Home/>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  outer: {\n    flex: 1,\n  },\n});","module.exports = __webpack_public_path__ + \"static/media/placeholder.35531f83.png\";"],"sourceRoot":""}